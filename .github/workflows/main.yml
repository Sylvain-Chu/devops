# name: CI/CD DevOps 2025

# # Trigger the workflow on push to the 'main' branch or pull requests
# on:
#   push:
#     branches:
#       - main
#   pull_request:

# jobs:
#   # Job to test the backend
  test-backend:
    runs-on: ubuntu-22.04  # Specifies the environment to run the job on (Ubuntu 22.04)

    steps:
      - name: Checkout repository  # Checkout the code from the repository
        uses: actions/checkout@v4

      - name: Set up JDK 21  # Set up Java Development Kit (JDK) version 21 with 'corretto' distribution
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Build and test with Maven  # Build and test the backend code using Maven
        run: |
          cd TD1/backend  # Navigate to the backend directory
          mvn clean install  # Clean the project and install dependencies, run tests

#   # Job to build and push Docker images
#   build-and-push-docker-images:
#     needs: test-backend  # This job will only run if 'test-backend' job succeeds
#     runs-on: ubuntu-22.04  # Specifies the environment to run the job on (Ubuntu 22.04)

#     steps:
#       - name: Checkout repository  # Checkout the code from the repository
#         uses: actions/checkout@v4

#       - name: Login to Docker Hub  # Log in to Docker Hub using credentials stored in secrets
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}  # Docker Hub username from secrets
#           password: ${{ secrets.DOCKERHUB_TOKEN }}  # Docker Hub token from secrets

#       # Build and push the backend Docker image
#       - name: Build and push backend image
#         uses: docker/build-push-action@v3
#         with:
#           context: ./TD1/backend  # Directory containing the backend code
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/tp-devops-backend:latest  # Docker image tag
#           push: ${{ github.ref == 'refs/heads/main' }}  # Push image only if commit is on the 'main' branch

#       # Build and push the database Docker image
#       - name: Build and push database image
#         uses: docker/build-push-action@v3
#         with:
#           context: ./TD1/db  # Directory containing the database code
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/tp-devops-db:latest  # Docker image tag
#           push: ${{ github.ref == 'refs/heads/main' }}  # Push image only if commit is on the 'main' branch

#       # Build and push the HTTP Docker image
#       - name: Build and push httpd image
#         uses: docker/build-push-action@v3
#         with:
#           context: ./TD1/http  # Directory containing the HTTP service code
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/tp-devops-http:latest  # Docker image tag
#           push: ${{ github.ref == 'refs/heads/main' }}  # Push image only if commit is on the 'main' branch

#   # Job to build the project and perform static analysis with SonarQube
#   build:
#     name: Build and analyze  # Job name
#     runs-on: ubuntu-22.04  # Specifies the environment to run the job on (Ubuntu 22.04)
    
#     steps:
#       - uses: actions/checkout@v4  # Checkout the code from the repository
#         with:
#           fetch-depth: 0  # Ensure a full clone (no shallow clone) for better analysis

#       - name: Set up JDK 21  # Set up JDK 21 with 'corretto' distribution for SonarQube analysis
#         uses: actions/setup-java@v4
#         with:
#           java-version: 21
#           distribution: 'corretto'  # Use 'corretto' JDK distribution

#       - name: Cache SonarQube packages  # Cache SonarQube dependencies to speed up analysis
#         uses: actions/cache@v4
#         with:
#           path: ~/.sonar/cache  # Path to cache SonarQube data
#           key: ${{ runner.os }}-sonar  # Cache key to uniquely identify the SonarQube cache
#           restore-keys: ${{ runner.os }}-sonar  # Restore the cache from previous builds if available

#       - name: Cache Maven packages  # Cache Maven dependencies to avoid re-downloading them
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2  # Path to cache Maven dependencies
#           key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}  # Use 'pom.xml' files to generate a unique cache key
#           restore-keys: ${{ runner.os }}-m2  # Restore the cache from previous Maven builds

#       - name: Build and analyze  # Run Maven build and SonarQube analysis
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Use SonarQube token from GitHub secrets
#         run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Sylvain-Chu_devops -f TD1/backend/pom.xml  # Run SonarQube analysis on backend project
